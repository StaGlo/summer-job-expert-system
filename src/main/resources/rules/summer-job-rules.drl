package rules;

import org.kie.api.runtime.KieRuntime;
import javax.swing.JOptionPane;
import javax.swing.JFrame;

import main.Questions;
import main.Jobs;

global JFrame frame;

declare GUI
    question : Questions
    job : Jobs
    title : String
    optionType : int
    messageType : int
    options : Object[]
end;

declare UserResponse
    question : Questions
    answer : String
end;

function void ask_question(JFrame frame, KieRuntime krt, GUI gui) {
    int n = JOptionPane.showOptionDialog(frame, 
                                         gui.getQuestion().getFullQuestion(),
                                         gui.getTitle(), 
                                         gui.getOptionType(),
                                         gui.getMessageType(),
                                         null,
                                         gui.getOptions(), 
                                         gui.getOptions()[0]);
    
    // Capture the user's response and insert a new UserResponse fact into working memory
    UserResponse response = new UserResponse();
    response.setQuestion(gui.getQuestion());
    response.setAnswer(gui.getOptions()[n].toString());
    krt.insert(response);
    
    // Print the question and the user's response
    System.out.println(gui.getQuestion() + ": " + gui.getOptions()[n].toString());
}

function void show_result(JFrame frame, KieRuntime krt, GUI gui) {
    JOptionPane.showMessageDialog(frame, 
    							  gui.getJob().getFullJob(), 
    							  gui.getTitle(), 
    							  gui.getMessageType());
    
    // Print the job
    System.out.println("Perfect job for you: " + gui.getJob());
} 


function GUI default_question (Questions question){
	GUI gui = new GUI();
    gui.setTitle("Please answer"); // Sets the title of the JOptionPane
    gui.setOptionType(JOptionPane.YES_NO_OPTION); // Sets the option type for the JOptionPane
    gui.setMessageType(JOptionPane.QUESTION_MESSAGE); // Sets the message type for the JOptionPane
    gui.setOptions(new Object[] {"no", "yes"}); // Sets the options for the JOptionPane
    
    gui.setQuestion(question); // Sets the question for the GUI
    return gui;
}

function GUI default_result (Jobs job){
    GUI gui = new GUI();
    gui.setTitle("Perfect job for your summer:"); // Sets the title of the JOptionPane
    gui.setMessageType(JOptionPane.INFORMATION_MESSAGE); // Sets the message type for the JOptionPane

    gui.setJob(Jobs.INTERN);
    return gui;
}


rule "needMoney"
when
	// Initial rule, no previous response needed to trigger
then
    GUI gui = default_question(Questions.NEED_MONEY); // Create a gui with default parameters and Question passed as argument
    ask_question(frame, kcontext.getKieRuntime(), gui); // Calls the function to display the JOptionPane and capture the response
end;


rule "haveMoney"
when
	UserResponse(question == Questions.NEED_MONEY, answer == "no");
then
	GUI gui = default_question(Questions.HAVE_MONEY);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;


rule "useBrain"
when
	UserResponse(question == Questions.NEED_MONEY, answer == "yes");
then	
	GUI gui = default_question(Questions.USE_BRAIN);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;


rule "workOffice"
when
	UserResponse(question == Questions.USE_BRAIN, answer == "yes");
then	
	GUI gui = default_question(Questions.WORK_OFFICE);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;


rule "outdoorsy"
when
	UserResponse(question == Questions.USE_BRAIN, answer == "no");
then	
	GUI gui = default_question(Questions.OUTDOORSY);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;


rule "artisticSkill"
when
	UserResponse(question == Questions.HAVE_MONEY, answer == "no");
then	
	GUI gui = default_question(Questions.ARTISTIC_SKILL);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;


rule "stayHamilton"
when
	UserResponse(question == Questions.HAVE_MONEY, answer == "yes");
then	
	GUI gui = default_question(Questions.STAY_HAMILTON);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;


rule "intern"
when
	UserResponse(question == Questions.ARTISTIC_SKILL, answer == "no");
then
    GUI gui = default_result(Jobs.INTERN);
	show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "musician"
when
	UserResponse(question == Questions.ARTISTIC_SKILL, answer == "yes");
then
    GUI gui = default_result(Jobs.MUSCIAN);
	show_result(frame, kcontext.getKieRuntime(), gui);
end; 