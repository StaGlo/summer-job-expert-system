package rules;

import org.kie.api.runtime.KieRuntime;
import javax.swing.JOptionPane;
import javax.swing.JFrame;

import main.Questions;
import main.Jobs;

global JFrame frame;

declare GUI
    question : Questions
    job : Jobs
    title : String
    optionType : int
    messageType : int
    options : Object[]
end;

declare UserResponse
    question : Questions
    answer : String
end;

function void ask_question(JFrame frame, KieRuntime krt, GUI gui) {
    int n = JOptionPane.showOptionDialog(frame, 
                                         gui.getQuestion().getFullQuestion(),
                                         gui.getTitle(), 
                                         gui.getOptionType(),
                                         gui.getMessageType(),
                                         null,
                                         gui.getOptions(), 
                                         gui.getOptions()[0]);
    
    // Capture the user's response and insert a new UserResponse fact into working memory
    UserResponse response = new UserResponse();
    response.setQuestion(gui.getQuestion());
    response.setAnswer(gui.getOptions()[n].toString());
    krt.insert(response);
    
    // Print the question and the user's response
    System.out.println(gui.getQuestion() + ": " + gui.getOptions()[n].toString());
}

function void show_result(JFrame frame, KieRuntime krt, GUI gui) {
    JOptionPane.showMessageDialog(frame, 
    							  gui.getJob().getFullJob(), 
    							  gui.getTitle(), 
    							  gui.getMessageType());
    
    // Print the job
    System.out.println("Perfect job for you: " + gui.getJob());
} 


function GUI default_question (Questions question){
	GUI gui = new GUI();
    gui.setTitle("Please answer"); // Sets the title of the JOptionPane
    gui.setOptionType(JOptionPane.YES_NO_OPTION); // Sets the option type for the JOptionPane
    gui.setMessageType(JOptionPane.QUESTION_MESSAGE); // Sets the message type for the JOptionPane
    gui.setOptions(new Object[] {"no", "yes"}); // Sets the options for the JOptionPane
    
    gui.setQuestion(question); // Sets the question for the GUI
    return gui;
}

function GUI default_result (Jobs job){
    GUI gui = new GUI();
    gui.setTitle("Perfect job for your summer:"); // Sets the title of the JOptionPane
    gui.setMessageType(JOptionPane.INFORMATION_MESSAGE); // Sets the message type for the JOptionPane

    gui.setJob(job);
    return gui;
}


// rules with questions

rule "needMoney?"
when
	// Initial rule, no previous response needed to trigger
then
    GUI gui = default_question(Questions.NEED_MONEY); // Create a gui with default parameters and Question passed as argument
    ask_question(frame, kcontext.getKieRuntime(), gui); // Calls the function to display the JOptionPane and capture the response
end;


rule "haveMoney?"
when
	UserResponse(question == Questions.NEED_MONEY, answer == "no");
then
	GUI gui = default_question(Questions.HAVE_MONEY);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;


rule "useBrain_makeMoney?"
when
	UserResponse(question == Questions.NEED_MONEY, answer == "yes");
then	
	GUI gui = default_question(Questions.USE_BRAIN);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;


rule "useBrain_haveMoney?"
when
	UserResponse(question == Questions.STAY_HAMILTON, answer == "yes");
then	
	GUI gui = default_question(Questions.USE_BRAIN);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;



rule "workOffice?"
when
	UserResponse(question == Questions.USE_BRAIN, answer == "yes");
	UserResponse(question == Questions.NEED_MONEY, answer == "yes");
then	
	GUI gui = default_question(Questions.WORK_OFFICE);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;


rule "outdoorsy_useBrain?"
when
	UserResponse(question == Questions.USE_BRAIN, answer == "no");
	UserResponse(question == Questions.NEED_MONEY, answer == "yes");
then	
	GUI gui = default_question(Questions.OUTDOORSY);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;


rule "outdoorsy_ownBoss?"
when
	UserResponse(question == Questions.OWN_BOSS, answer == "no")
then	
	GUI gui = default_question(Questions.OUTDOORSY);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "artisticSkill?"
when
	UserResponse(question == Questions.HAVE_MONEY, answer == "no");
then	
	GUI gui = default_question(Questions.ARTISTIC_SKILL);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;


rule "stayHamilton?"
when
	UserResponse(question == Questions.HAVE_MONEY, answer == "yes");
then	
	GUI gui = default_question(Questions.STAY_HAMILTON);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;


rule "hardLabor?"
when
    UserResponse(question == Questions.OUTDOORSY, answer == "yes");
    UserResponse(question == Questions.USE_BRAIN, answer == "no");
then
    GUI gui = default_question(Questions.HARD_LABOR);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "showerInfrequent?"
when
    UserResponse(question == Questions.HARD_LABOR, answer == "yes");
then
    GUI gui = default_question(Questions.SHOWER_INFREQUENT);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "foodWork?"
when
    UserResponse(question == Questions.OUTDOORSY, answer == "no");
    UserResponse(question == Questions.USE_BRAIN, answer == "no");
then
    GUI gui = default_question(Questions.FOOD_WORK);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "animalLover?"
when
    UserResponse(question == Questions.SHOWER_INFREQUENT, answer == "no");
then
    GUI gui = default_question(Questions.ANIMAL_LOVER);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "okTravelling?"
when
    UserResponse(question == Questions.BOSSY, answer == "no");
then
    GUI gui = default_question(Questions.OK_TRAVELLING);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "fearNeedles?"
when
    UserResponse(question == Questions.OK_TRAVELLING, answer == "no");
then
    GUI gui = default_question(Questions.FEAR_NEEDLES);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "camper?"
when
    UserResponse(question == Questions.HARD_LABOR, answer == "no");
then
    GUI gui = default_question(Questions.CAMPER);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "workMcMaster?"
when
    UserResponse(question == Questions.WORK_OFFICE, answer == "yes");
then
    GUI gui = default_question(Questions.WORK_MCMASTER);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "ownBoss?"
when
    UserResponse(question == Questions.WORK_OFFICE, answer == "no");
then
    GUI gui = default_question(Questions.OWN_BOSS);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "goodIT?"
when
    UserResponse(question == Questions.WORK_MCMASTER, answer == "no");
then
    GUI gui = default_question(Questions.GOOD_IT);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "programmer?"
when
    UserResponse(question == Questions.GOOD_IT, answer == "yes");
then
    GUI gui = default_question(Questions.PROGRAMMER);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "scientist?"
when
    UserResponse(question == Questions.WORK_MCMASTER, answer == "yes");
then
    GUI gui = default_question(Questions.SCIENTIST);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "academics?"
when
    UserResponse(question == Questions.OWN_BOSS, answer == "yes");
then
    GUI gui = default_question(Questions.ACADEMICS);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "teacher?"
when
    UserResponse(question == Questions.ACADEMICS, answer == "yes");
then
    GUI gui = default_question(Questions.TEACHER);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "artist?"
when
    UserResponse(question == Questions.ACADEMICS, answer == "no");
then
    GUI gui = default_question(Questions.ARTIST);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "bossy?"
when
    UserResponse(question == Questions.FOOD_WORK, answer == "no");
then
    GUI gui = default_question(Questions.BOSSY);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "bulky?"
when
    UserResponse(question == Questions.BOSSY, answer == "yes");
then
    GUI gui = default_question(Questions.BULKY);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "social?"
when
    UserResponse(question == Questions.FOOD_WORK, answer == "yes");
then
    GUI gui = default_question(Questions.SOCIAL);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "okGreasy?"
when
    UserResponse(question == Questions.SOCIAL, answer == "no");
then
    GUI gui = default_question(Questions.OK_GREASY);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "likeBurgers?"
when
    UserResponse(question == Questions.OK_GREASY, answer == "no");
then
    GUI gui = default_question(Questions.LIKE_BURGERS);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "knowDrinks?"
when
    UserResponse(question == Questions.SOCIAL, answer == "yes");
then
    GUI gui = default_question(Questions.KNOW_DRINKS);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;

rule "swimmer?"
when
    UserResponse(question == Questions.BULKY, answer == "no");
then
    GUI gui = default_question(Questions.SWIMMER);
    ask_question(frame, kcontext.getKieRuntime(), gui);
end;





// rules with perfet jobs (results)

rule "intern"
when
    UserResponse(question == Questions.ARTISTIC_SKILL, answer == "no");
then
    GUI gui = default_result(Jobs.INTERN);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "musician"
when
    UserResponse(question == Questions.ARTISTIC_SKILL, answer == "yes");
then
    GUI gui = default_result(Jobs.MUSICIAN);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "traveller"
when
    UserResponse(question == Questions.STAY_HAMILTON, answer == "no");
then
    GUI gui = default_result(Jobs.TRAVELLER);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "potato"
when
    UserResponse(question == Questions.USE_BRAIN, answer == "no");
    UserResponse(question == Questions.STAY_HAMILTON, answer == "yes");
then
    GUI gui = default_result(Jobs.POTATO);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "student"
when
    UserResponse(question == Questions.USE_BRAIN, answer == "yes");
    UserResponse(question == Questions.STAY_HAMILTON, answer == "yes")
then
    GUI gui = default_result(Jobs.STUDENT);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "picker"
when
    UserResponse(question == Questions.CAMPER, answer == "no");
then
    GUI gui = default_result(Jobs.PICKER);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "park"
when
    UserResponse(question == Questions.CAMPER, answer == "yes");
then
    GUI gui = default_result(Jobs.PARK);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "farm"
when
    UserResponse(question == Questions.ANIMAL_LOVER, answer == "yes");
then
    GUI gui = default_result(Jobs.FARM);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "planter"
when
    UserResponse(question == Questions.SHOWER_INFREQUENT, answer == "yes");
then
    GUI gui = default_result(Jobs.PLANTER);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "landscaper"
when
    UserResponse(question == Questions.ANIMAL_LOVER, answer == "no");
then
    GUI gui = default_result(Jobs.LANDSCAPER);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "sales"
when
    UserResponse(question == Questions.FEAR_NEEDLES, answer == "yes");
then
    GUI gui = default_result(Jobs.SALES);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "museum"
when
    UserResponse(question == Questions.OUTDOORSY, answer == "no");
    UserResponse(question == Questions.OWN_BOSS, answer == "no");
then
    GUI gui = default_result(Jobs.MUSEUM);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "camp"
when
    UserResponse(question == Questions.OUTDOORSY, answer == "yes");
    UserResponse(question == Questions.OWN_BOSS, answer == "no");
then
    GUI gui = default_result(Jobs.CAMP);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "entrepreneur"
when
    UserResponse(question == Questions.ARTIST, answer == "no");
then
    GUI gui = default_result(Jobs.ENTREPRENEUR);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "busker"
when
    UserResponse(question == Questions.ARTIST, answer == "yes");
then
    GUI gui = default_result(Jobs.BUSKER);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "usra"
when
    UserResponse(question == Questions.TEACHER, answer == "no");
then
    GUI gui = default_result(Jobs.USRA);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "government"
when
    UserResponse(question == Questions.GOOD_IT, answer == "no");
then
    GUI gui = default_result(Jobs.GOVERNMENT);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "admin"
when
    UserResponse(question == Questions.PROGRAMMER, answer == "no");
then
    GUI gui = default_result(Jobs.ADMIN);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "dev"
when
    UserResponse(question == Questions.PROGRAMMER, answer == "yes");
then
    GUI gui = default_result(Jobs.DEV);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "tutor"
when
    UserResponse(question == Questions.TEACHER, answer == "yes");
then
    GUI gui = default_result(Jobs.TUTOR);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "researcher"
when
    UserResponse(question == Questions.SCIENTIST, answer == "yes");
then
    GUI gui = default_result(Jobs.RESEARCHER);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "university"
when
    UserResponse(question == Questions.SCIENTIST, answer == "no");
then
    GUI gui = default_result(Jobs.UNIVERSITY);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "bartender"
when
    UserResponse(question == Questions.KNOW_DRINKS, answer == "yes");
then
    GUI gui = default_result(Jobs.BARTENDER);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "barrista"
when
    UserResponse(question == Questions.KNOW_DRINKS, answer == "no");
then
    GUI gui = default_result(Jobs.BARRISTA);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "fastfood"
when
    UserResponse(question == Questions.LIKE_BURGERS, answer == "yes");
then
    GUI gui = default_result(Jobs.FASTFOOD);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "cook"
when
    UserResponse(question == Questions.LIKE_BURGERS, answer == "no");
then
    GUI gui = default_result(Jobs.COOK);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "grocery"
when
    UserResponse(question == Questions.OK_GREASY, answer == "yes");
then
    GUI gui = default_result(Jobs.GROCERY);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "security"
when
    UserResponse(question == Questions.BULKY, answer == "yes");
then
    GUI gui = default_result(Jobs.SECURITY);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "guard"
when
    UserResponse(question == Questions.SWIMMER, answer == "yes");
then
    GUI gui = default_result(Jobs.GUARD);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "referee"
when
    UserResponse(question == Questions.SWIMMER, answer == "no");
then
    GUI gui = default_result(Jobs.REFEREE);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "test_subject"
when
    UserResponse(question == Questions.FEAR_NEEDLES, answer == "no");
then
    GUI gui = default_result(Jobs.TEST_SUBJECT);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;

rule "marketing"
when
    UserResponse(question == Questions.OK_TRAVELLING, answer == "yes");
then
    GUI gui = default_result(Jobs.MARKETING);
    show_result(frame, kcontext.getKieRuntime(), gui);
end;
